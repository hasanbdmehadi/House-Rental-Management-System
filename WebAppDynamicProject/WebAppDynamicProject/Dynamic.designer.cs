#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAppDynamicProject
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MonicaDB")]
	public partial class DynamicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgent(Agent instance);
    partial void UpdateAgent(Agent instance);
    partial void DeleteAgent(Agent instance);
    partial void InsertRequest(Request instance);
    partial void UpdateRequest(Request instance);
    partial void DeleteRequest(Request instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertHouse(House instance);
    partial void UpdateHouse(House instance);
    partial void DeleteHouse(House instance);
    partial void InsertOwner(Owner instance);
    partial void UpdateOwner(Owner instance);
    partial void DeleteOwner(Owner instance);
    partial void InsertPostOffice(PostOffice instance);
    partial void UpdatePostOffice(PostOffice instance);
    partial void DeletePostOffice(PostOffice instance);
    partial void InsertRental(Rental instance);
    partial void UpdateRental(Rental instance);
    partial void DeleteRental(Rental instance);
    partial void InsertReceipt(Receipt instance);
    partial void UpdateReceipt(Receipt instance);
    partial void DeleteReceipt(Receipt instance);
    partial void InsertMonth(Month instance);
    partial void UpdateMonth(Month instance);
    partial void DeleteMonth(Month instance);
    #endregion
		
		public DynamicDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MonicaDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DynamicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Agent> Agents
		{
			get
			{
				return this.GetTable<Agent>();
			}
		}
		
		public System.Data.Linq.Table<Request> Requests
		{
			get
			{
				return this.GetTable<Request>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<House> Houses
		{
			get
			{
				return this.GetTable<House>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<PostOffice> PostOffices
		{
			get
			{
				return this.GetTable<PostOffice>();
			}
		}
		
		public System.Data.Linq.Table<Rental> Rentals
		{
			get
			{
				return this.GetTable<Rental>();
			}
		}
		
		public System.Data.Linq.Table<View_VaccantHouse> View_VaccantHouses
		{
			get
			{
				return this.GetTable<View_VaccantHouse>();
			}
		}
		
		public System.Data.Linq.Table<Receipt> Receipts
		{
			get
			{
				return this.GetTable<Receipt>();
			}
		}
		
		public System.Data.Linq.Table<Month> Months
		{
			get
			{
				return this.GetTable<Month>();
			}
		}
		
		[Function(Name="dbo.VaccantList")]
		public ISingleResult<VaccantListResult> VaccantList([Parameter(Name="Area", DbType="VarChar(20)")] string area, [Parameter(Name="Category", DbType="VarChar(20)")] string category)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), area, category);
			return ((ISingleResult<VaccantListResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Agents")]
	public partial class Agent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AgentID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private int _PostalID;
		
		private int _CityID;
		
		private string _Phone;
		
		private string _email;
		
		private EntitySet<Rental> _Rentals;
		
		private EntityRef<City> _City;
		
		private EntityRef<PostOffice> _PostOffice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgentIDChanging(int value);
    partial void OnAgentIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostalIDChanging(int value);
    partial void OnPostalIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public Agent()
		{
			this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
			this._City = default(EntityRef<City>);
			this._PostOffice = default(EntityRef<PostOffice>);
			OnCreated();
		}
		
		[Column(Storage="_AgentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PostalID", DbType="Int NOT NULL")]
		public int PostalID
		{
			get
			{
				return this._PostalID;
			}
			set
			{
				if ((this._PostalID != value))
				{
					if (this._PostOffice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalIDChanging(value);
					this.SendPropertyChanging();
					this._PostalID = value;
					this.SendPropertyChanged("PostalID");
					this.OnPostalIDChanged();
				}
			}
		}
		
		[Column(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="NVarChar(30)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Association(Name="Agent_Rental", Storage="_Rentals", ThisKey="AgentID", OtherKey="AgentID")]
		public EntitySet<Rental> Rentals
		{
			get
			{
				return this._Rentals;
			}
			set
			{
				this._Rentals.Assign(value);
			}
		}
		
		[Association(Name="City_Agent", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Agents.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Agents.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="PostOffice_Agent", Storage="_PostOffice", ThisKey="PostalID", OtherKey="PostalID", IsForeignKey=true)]
		public PostOffice PostOffice
		{
			get
			{
				return this._PostOffice.Entity;
			}
			set
			{
				PostOffice previousValue = this._PostOffice.Entity;
				if (((previousValue != value) 
							|| (this._PostOffice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostOffice.Entity = null;
						previousValue.Agents.Remove(this);
					}
					this._PostOffice.Entity = value;
					if ((value != null))
					{
						value.Agents.Add(this);
						this._PostalID = value.PostalID;
					}
					else
					{
						this._PostalID = default(int);
					}
					this.SendPropertyChanged("PostOffice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Agent = this;
		}
		
		private void detach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Agent = null;
		}
	}
	
	[Table(Name="dbo.Requests")]
	public partial class Request : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RequestID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Phone;
		
		private string _email;
		
		private int _HouseID;
		
		private int _AreaCode;
		
		private string _Message;
		
		private System.DateTime _RequestDate;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<House> _House;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRequestIDChanging(int value);
    partial void OnRequestIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnAreaCodeChanging(int value);
    partial void OnAreaCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnRequestDateChanging(System.DateTime value);
    partial void OnRequestDateChanged();
    #endregion
		
		public Request()
		{
			this._Area = default(EntityRef<Area>);
			this._House = default(EntityRef<House>);
			OnCreated();
		}
		
		[Column(Storage="_RequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="VarChar(20)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="Int NOT NULL")]
		public int AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_RequestDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		[Association(Name="Area_Request", Storage="_Area", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(int);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[Association(Name="House_Request", Storage="_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public House House
		{
			get
			{
				return this._House.Entity;
			}
			set
			{
				House previousValue = this._House.Entity;
				if (((previousValue != value) 
							|| (this._House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._House.Entity = null;
						previousValue.Requests.Remove(this);
					}
					this._House.Entity = value;
					if ((value != null))
					{
						value.Requests.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(int);
					}
					this.SendPropertyChanged("House");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Areas")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AreaCode;
		
		private string _AreaName;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<House> _Houses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAreaCodeChanging(int value);
    partial void OnAreaCodeChanged();
    partial void OnAreaNameChanging(string value);
    partial void OnAreaNameChanged();
    #endregion
		
		public Area()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Houses = new EntitySet<House>(new Action<House>(this.attach_Houses), new Action<House>(this.detach_Houses));
			OnCreated();
		}
		
		[Column(Storage="_AreaCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AreaName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this.OnAreaNameChanging(value);
					this.SendPropertyChanging();
					this._AreaName = value;
					this.SendPropertyChanged("AreaName");
					this.OnAreaNameChanged();
				}
			}
		}
		
		[Association(Name="Area_Request", Storage="_Requests", ThisKey="AreaCode", OtherKey="AreaCode")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[Association(Name="Area_House", Storage="_Houses", ThisKey="AreaCode", OtherKey="AreaCode")]
		public EntitySet<House> Houses
		{
			get
			{
				return this._Houses;
			}
			set
			{
				this._Houses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
		
		private void attach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Area = this;
		}
		
		private void detach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Area = null;
		}
	}
	
	[Table(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _CategoryName;
		
		private string _Description;
		
		private string _Facitlities;
		
		private EntitySet<House> _Houses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFacitlitiesChanging(string value);
    partial void OnFacitlitiesChanged();
    #endregion
		
		public Category()
		{
			this._Houses = new EntitySet<House>(new Action<House>(this.attach_Houses), new Action<House>(this.detach_Houses));
			OnCreated();
		}
		
		[Column(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Facitlities", DbType="VarChar(100)")]
		public string Facitlities
		{
			get
			{
				return this._Facitlities;
			}
			set
			{
				if ((this._Facitlities != value))
				{
					this.OnFacitlitiesChanging(value);
					this.SendPropertyChanging();
					this._Facitlities = value;
					this.SendPropertyChanged("Facitlities");
					this.OnFacitlitiesChanged();
				}
			}
		}
		
		[Association(Name="Category_House", Storage="_Houses", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<House> Houses
		{
			get
			{
				return this._Houses;
			}
			set
			{
				this._Houses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[Table(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CityID;
		
		private string _City1;
		
		private EntitySet<Agent> _Agents;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Owner> _Owners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCity1Changing(string value);
    partial void OnCity1Changed();
    #endregion
		
		public City()
		{
			this._Agents = new EntitySet<Agent>(new Action<Agent>(this.attach_Agents), new Action<Agent>(this.detach_Agents));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Owners = new EntitySet<Owner>(new Action<Owner>(this.attach_Owners), new Action<Owner>(this.detach_Owners));
			OnCreated();
		}
		
		[Column(Storage="_CityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[Column(Name="City", Storage="_City1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string City1
		{
			get
			{
				return this._City1;
			}
			set
			{
				if ((this._City1 != value))
				{
					this.OnCity1Changing(value);
					this.SendPropertyChanging();
					this._City1 = value;
					this.SendPropertyChanged("City1");
					this.OnCity1Changed();
				}
			}
		}
		
		[Association(Name="City_Agent", Storage="_Agents", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Agent> Agents
		{
			get
			{
				return this._Agents;
			}
			set
			{
				this._Agents.Assign(value);
			}
		}
		
		[Association(Name="City_Client", Storage="_Clients", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[Association(Name="City_Owner", Storage="_Owners", ThisKey="CityID", OtherKey="CityID")]
		public EntitySet<Owner> Owners
		{
			get
			{
				return this._Owners;
			}
			set
			{
				this._Owners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agents(Agent entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Agents(Agent entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[Table(Name="dbo.Clients")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClientID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private int _PostalID;
		
		private int _CityID;
		
		private System.Nullable<int> _CountryID;
		
		private string _NationalID;
		
		private string _Phone;
		
		private string _email;
		
		private string _Comments;
		
		private EntitySet<Rental> _Rentals;
		
		private EntitySet<Receipt> _Receipts;
		
		private EntityRef<City> _City;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<PostOffice> _PostOffice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPostalIDChanging(int value);
    partial void OnPostalIDChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    partial void OnNationalIDChanging(string value);
    partial void OnNationalIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Client()
		{
			this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._City = default(EntityRef<City>);
			this._Country = default(EntityRef<Country>);
			this._PostOffice = default(EntityRef<PostOffice>);
			OnCreated();
		}
		
		[Column(Storage="_ClientID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(30)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_PostalID", DbType="Int NOT NULL")]
		public int PostalID
		{
			get
			{
				return this._PostalID;
			}
			set
			{
				if ((this._PostalID != value))
				{
					if (this._PostOffice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalIDChanging(value);
					this.SendPropertyChanging();
					this._PostalID = value;
					this.SendPropertyChanged("PostalID");
					this.OnPostalIDChanged();
				}
			}
		}
		
		[Column(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_NationalID", DbType="VarChar(20)")]
		public string NationalID
		{
			get
			{
				return this._NationalID;
			}
			set
			{
				if ((this._NationalID != value))
				{
					this.OnNationalIDChanging(value);
					this.SendPropertyChanging();
					this._NationalID = value;
					this.SendPropertyChanged("NationalID");
					this.OnNationalIDChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="VarChar(30)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(100)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="Client_Rental", Storage="_Rentals", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Rental> Rentals
		{
			get
			{
				return this._Rentals;
			}
			set
			{
				this._Rentals.Assign(value);
			}
		}
		
		[Association(Name="Client_Receipt", Storage="_Receipts", ThisKey="ClientID", OtherKey="ClientID")]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[Association(Name="City_Client", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="Country_Client", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="PostOffice_Client", Storage="_PostOffice", ThisKey="PostalID", OtherKey="PostalID", IsForeignKey=true)]
		public PostOffice PostOffice
		{
			get
			{
				return this._PostOffice.Entity;
			}
			set
			{
				PostOffice previousValue = this._PostOffice.Entity;
				if (((previousValue != value) 
							|| (this._PostOffice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostOffice.Entity = null;
						previousValue.Clients.Remove(this);
					}
					this._PostOffice.Entity = value;
					if ((value != null))
					{
						value.Clients.Add(this);
						this._PostalID = value.PostalID;
					}
					else
					{
						this._PostalID = default(int);
					}
					this.SendPropertyChanged("PostOffice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Client = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Client = null;
		}
	}
	
	[Table(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _Country1;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Owner> _Owners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountry1Changing(string value);
    partial void OnCountry1Changed();
    #endregion
		
		public Country()
		{
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Owners = new EntitySet<Owner>(new Action<Owner>(this.attach_Owners), new Action<Owner>(this.detach_Owners));
			OnCreated();
		}
		
		[Column(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Name="Country", Storage="_Country1", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string Country1
		{
			get
			{
				return this._Country1;
			}
			set
			{
				if ((this._Country1 != value))
				{
					this.OnCountry1Changing(value);
					this.SendPropertyChanging();
					this._Country1 = value;
					this.SendPropertyChanged("Country1");
					this.OnCountry1Changed();
				}
			}
		}
		
		[Association(Name="Country_Client", Storage="_Clients", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[Association(Name="Country_Owner", Storage="_Owners", ThisKey="CountryID", OtherKey="CountryID")]
		public EntitySet<Owner> Owners
		{
			get
			{
				return this._Owners;
			}
			set
			{
				this._Owners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.Houses")]
	public partial class House : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _HouseID;
		
		private string _HouseNo;
		
		private string _Address;
		
		private int _CategoryID;
		
		private string _BuildingName;
		
		private int _AreaCode;
		
		private System.Nullable<decimal> _Rent;
		
		private int _OwnerID;
		
		private System.Data.Linq.Binary _Picture;
		
		private EntitySet<Request> _Requests;
		
		private EntitySet<Rental> _Rentals;
		
		private EntitySet<Receipt> _Receipts;
		
		private EntityRef<Area> _Area;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Owner> _Owner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnHouseNoChanging(string value);
    partial void OnHouseNoChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnBuildingNameChanging(string value);
    partial void OnBuildingNameChanged();
    partial void OnAreaCodeChanging(int value);
    partial void OnAreaCodeChanged();
    partial void OnRentChanging(System.Nullable<decimal> value);
    partial void OnRentChanged();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnPictureChanging(System.Data.Linq.Binary value);
    partial void OnPictureChanged();
    #endregion
		
		public House()
		{
			this._Requests = new EntitySet<Request>(new Action<Request>(this.attach_Requests), new Action<Request>(this.detach_Requests));
			this._Rentals = new EntitySet<Rental>(new Action<Rental>(this.attach_Rentals), new Action<Rental>(this.detach_Rentals));
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			this._Area = default(EntityRef<Area>);
			this._Category = default(EntityRef<Category>);
			this._Owner = default(EntityRef<Owner>);
			OnCreated();
		}
		
		[Column(Storage="_HouseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_HouseNo", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string HouseNo
		{
			get
			{
				return this._HouseNo;
			}
			set
			{
				if ((this._HouseNo != value))
				{
					this.OnHouseNoChanging(value);
					this.SendPropertyChanging();
					this._HouseNo = value;
					this.SendPropertyChanged("HouseNo");
					this.OnHouseNoChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_BuildingName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildingName
		{
			get
			{
				return this._BuildingName;
			}
			set
			{
				if ((this._BuildingName != value))
				{
					this.OnBuildingNameChanging(value);
					this.SendPropertyChanging();
					this._BuildingName = value;
					this.SendPropertyChanged("BuildingName");
					this.OnBuildingNameChanged();
				}
			}
		}
		
		[Column(Storage="_AreaCode", DbType="Int NOT NULL")]
		public int AreaCode
		{
			get
			{
				return this._AreaCode;
			}
			set
			{
				if ((this._AreaCode != value))
				{
					if (this._Area.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAreaCodeChanging(value);
					this.SendPropertyChanging();
					this._AreaCode = value;
					this.SendPropertyChanged("AreaCode");
					this.OnAreaCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Rent", DbType="SmallMoney")]
		public System.Nullable<decimal> Rent
		{
			get
			{
				return this._Rent;
			}
			set
			{
				if ((this._Rent != value))
				{
					this.OnRentChanging(value);
					this.SendPropertyChanging();
					this._Rent = value;
					this.SendPropertyChanged("Rent");
					this.OnRentChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerID", DbType="Int NOT NULL")]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Picture", DbType="Image", CanBeNull=false)]
		public System.Data.Linq.Binary Picture
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("Picture");
					this.OnPictureChanged();
				}
			}
		}
		
		[Association(Name="House_Request", Storage="_Requests", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<Request> Requests
		{
			get
			{
				return this._Requests;
			}
			set
			{
				this._Requests.Assign(value);
			}
		}
		
		[Association(Name="House_Rental", Storage="_Rentals", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<Rental> Rentals
		{
			get
			{
				return this._Rentals;
			}
			set
			{
				this._Rentals.Assign(value);
			}
		}
		
		[Association(Name="House_Receipt", Storage="_Receipts", ThisKey="HouseID", OtherKey="HouseID")]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		[Association(Name="Area_House", Storage="_Area", ThisKey="AreaCode", OtherKey="AreaCode", IsForeignKey=true)]
		public Area Area
		{
			get
			{
				return this._Area.Entity;
			}
			set
			{
				Area previousValue = this._Area.Entity;
				if (((previousValue != value) 
							|| (this._Area.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Area.Entity = null;
						previousValue.Houses.Remove(this);
					}
					this._Area.Entity = value;
					if ((value != null))
					{
						value.Houses.Add(this);
						this._AreaCode = value.AreaCode;
					}
					else
					{
						this._AreaCode = default(int);
					}
					this.SendPropertyChanged("Area");
				}
			}
		}
		
		[Association(Name="Category_House", Storage="_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Houses.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Houses.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[Association(Name="Owner_House", Storage="_Owner", ThisKey="OwnerID", OtherKey="OwnerID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Houses.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Houses.Add(this);
						this._OwnerID = value.OwnerID;
					}
					else
					{
						this._OwnerID = default(int);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.House = this;
		}
		
		private void detach_Requests(Request entity)
		{
			this.SendPropertyChanging();
			entity.House = null;
		}
		
		private void attach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.House = this;
		}
		
		private void detach_Rentals(Rental entity)
		{
			this.SendPropertyChanging();
			entity.House = null;
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.House = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.House = null;
		}
	}
	
	[Table(Name="dbo.Owners")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OwnerID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private int _CityID;
		
		private int _PostalID;
		
		private int _CountryID;
		
		private string _Phone;
		
		private string _email;
		
		private string _Comments;
		
		private EntitySet<House> _Houses;
		
		private EntityRef<City> _City;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<PostOffice> _PostOffice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwnerIDChanging(int value);
    partial void OnOwnerIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityIDChanging(int value);
    partial void OnCityIDChanged();
    partial void OnPostalIDChanging(int value);
    partial void OnPostalIDChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public Owner()
		{
			this._Houses = new EntitySet<House>(new Action<House>(this.attach_Houses), new Action<House>(this.detach_Houses));
			this._City = default(EntityRef<City>);
			this._Country = default(EntityRef<Country>);
			this._PostOffice = default(EntityRef<PostOffice>);
			OnCreated();
		}
		
		[Column(Storage="_OwnerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(20)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_CityID", DbType="Int NOT NULL")]
		public int CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[Column(Storage="_PostalID", DbType="Int NOT NULL")]
		public int PostalID
		{
			get
			{
				return this._PostalID;
			}
			set
			{
				if ((this._PostalID != value))
				{
					if (this._PostOffice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPostalIDChanging(value);
					this.SendPropertyChanging();
					this._PostalID = value;
					this.SendPropertyChanged("PostalID");
					this.OnPostalIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryID", DbType="Int NOT NULL")]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_email", DbType="VarChar(20)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="VarChar(100)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Association(Name="Owner_House", Storage="_Houses", ThisKey="OwnerID", OtherKey="OwnerID")]
		public EntitySet<House> Houses
		{
			get
			{
				return this._Houses;
			}
			set
			{
				this._Houses.Assign(value);
			}
		}
		
		[Association(Name="City_Owner", Storage="_City", ThisKey="CityID", OtherKey="CityID", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Owners.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Owners.Add(this);
						this._CityID = value.CityID;
					}
					else
					{
						this._CityID = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[Association(Name="Country_Owner", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Owners.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Owners.Add(this);
						this._CountryID = value.CountryID;
					}
					else
					{
						this._CountryID = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="PostOffice_Owner", Storage="_PostOffice", ThisKey="PostalID", OtherKey="PostalID", IsForeignKey=true)]
		public PostOffice PostOffice
		{
			get
			{
				return this._PostOffice.Entity;
			}
			set
			{
				PostOffice previousValue = this._PostOffice.Entity;
				if (((previousValue != value) 
							|| (this._PostOffice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PostOffice.Entity = null;
						previousValue.Owners.Remove(this);
					}
					this._PostOffice.Entity = value;
					if ((value != null))
					{
						value.Owners.Add(this);
						this._PostalID = value.PostalID;
					}
					else
					{
						this._PostalID = default(int);
					}
					this.SendPropertyChanged("PostOffice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Houses(House entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[Table(Name="dbo.PostOffices")]
	public partial class PostOffice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostalID;
		
		private string _PostOffice1;
		
		private EntitySet<Agent> _Agents;
		
		private EntitySet<Client> _Clients;
		
		private EntitySet<Owner> _Owners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostalIDChanging(int value);
    partial void OnPostalIDChanged();
    partial void OnPostOffice1Changing(string value);
    partial void OnPostOffice1Changed();
    #endregion
		
		public PostOffice()
		{
			this._Agents = new EntitySet<Agent>(new Action<Agent>(this.attach_Agents), new Action<Agent>(this.detach_Agents));
			this._Clients = new EntitySet<Client>(new Action<Client>(this.attach_Clients), new Action<Client>(this.detach_Clients));
			this._Owners = new EntitySet<Owner>(new Action<Owner>(this.attach_Owners), new Action<Owner>(this.detach_Owners));
			OnCreated();
		}
		
		[Column(Storage="_PostalID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PostalID
		{
			get
			{
				return this._PostalID;
			}
			set
			{
				if ((this._PostalID != value))
				{
					this.OnPostalIDChanging(value);
					this.SendPropertyChanging();
					this._PostalID = value;
					this.SendPropertyChanged("PostalID");
					this.OnPostalIDChanged();
				}
			}
		}
		
		[Column(Name="PostOffice", Storage="_PostOffice1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PostOffice1
		{
			get
			{
				return this._PostOffice1;
			}
			set
			{
				if ((this._PostOffice1 != value))
				{
					this.OnPostOffice1Changing(value);
					this.SendPropertyChanging();
					this._PostOffice1 = value;
					this.SendPropertyChanged("PostOffice1");
					this.OnPostOffice1Changed();
				}
			}
		}
		
		[Association(Name="PostOffice_Agent", Storage="_Agents", ThisKey="PostalID", OtherKey="PostalID")]
		public EntitySet<Agent> Agents
		{
			get
			{
				return this._Agents;
			}
			set
			{
				this._Agents.Assign(value);
			}
		}
		
		[Association(Name="PostOffice_Client", Storage="_Clients", ThisKey="PostalID", OtherKey="PostalID")]
		public EntitySet<Client> Clients
		{
			get
			{
				return this._Clients;
			}
			set
			{
				this._Clients.Assign(value);
			}
		}
		
		[Association(Name="PostOffice_Owner", Storage="_Owners", ThisKey="PostalID", OtherKey="PostalID")]
		public EntitySet<Owner> Owners
		{
			get
			{
				return this._Owners;
			}
			set
			{
				this._Owners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agents(Agent entity)
		{
			this.SendPropertyChanging();
			entity.PostOffice = this;
		}
		
		private void detach_Agents(Agent entity)
		{
			this.SendPropertyChanging();
			entity.PostOffice = null;
		}
		
		private void attach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.PostOffice = this;
		}
		
		private void detach_Clients(Client entity)
		{
			this.SendPropertyChanging();
			entity.PostOffice = null;
		}
		
		private void attach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.PostOffice = this;
		}
		
		private void detach_Owners(Owner entity)
		{
			this.SendPropertyChanging();
			entity.PostOffice = null;
		}
	}
	
	[Table(Name="dbo.Rentals")]
	public partial class Rental : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RentalCode;
		
		private int _HouseID;
		
		private int _ClientID;
		
		private System.Nullable<decimal> _MonthlyRent;
		
		private System.Nullable<decimal> _AdvanceAmount;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _AgentID;
		
		private System.DateTime _EntryDate;
		
		private System.Nullable<bool> _Status;
		
		private EntityRef<Agent> _Agent;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<House> _House;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRentalCodeChanging(int value);
    partial void OnRentalCodeChanged();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnMonthlyRentChanging(System.Nullable<decimal> value);
    partial void OnMonthlyRentChanged();
    partial void OnAdvanceAmountChanging(System.Nullable<decimal> value);
    partial void OnAdvanceAmountChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnAgentIDChanging(System.Nullable<int> value);
    partial void OnAgentIDChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public Rental()
		{
			this._Agent = default(EntityRef<Agent>);
			this._Client = default(EntityRef<Client>);
			this._House = default(EntityRef<House>);
			OnCreated();
		}
		
		[Column(Storage="_RentalCode", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RentalCode
		{
			get
			{
				return this._RentalCode;
			}
			set
			{
				if ((this._RentalCode != value))
				{
					this.OnRentalCodeChanging(value);
					this.SendPropertyChanging();
					this._RentalCode = value;
					this.SendPropertyChanged("RentalCode");
					this.OnRentalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[Column(Storage="_MonthlyRent", DbType="SmallMoney")]
		public System.Nullable<decimal> MonthlyRent
		{
			get
			{
				return this._MonthlyRent;
			}
			set
			{
				if ((this._MonthlyRent != value))
				{
					this.OnMonthlyRentChanging(value);
					this.SendPropertyChanging();
					this._MonthlyRent = value;
					this.SendPropertyChanged("MonthlyRent");
					this.OnMonthlyRentChanged();
				}
			}
		}
		
		[Column(Storage="_AdvanceAmount", DbType="SmallMoney")]
		public System.Nullable<decimal> AdvanceAmount
		{
			get
			{
				return this._AdvanceAmount;
			}
			set
			{
				if ((this._AdvanceAmount != value))
				{
					this.OnAdvanceAmountChanging(value);
					this.SendPropertyChanging();
					this._AdvanceAmount = value;
					this.SendPropertyChanged("AdvanceAmount");
					this.OnAdvanceAmountChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_AgentID", DbType="Int")]
		public System.Nullable<int> AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._Agent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[Column(Storage="_EntryDate", DbType="DateTime NOT NULL")]
		public System.DateTime EntryDate
		{
			get
			{
				return this._EntryDate;
			}
			set
			{
				if ((this._EntryDate != value))
				{
					this.OnEntryDateChanging(value);
					this.SendPropertyChanging();
					this._EntryDate = value;
					this.SendPropertyChanged("EntryDate");
					this.OnEntryDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Agent_Rental", Storage="_Agent", ThisKey="AgentID", OtherKey="AgentID", IsForeignKey=true)]
		public Agent Agent
		{
			get
			{
				return this._Agent.Entity;
			}
			set
			{
				Agent previousValue = this._Agent.Entity;
				if (((previousValue != value) 
							|| (this._Agent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agent.Entity = null;
						previousValue.Rentals.Remove(this);
					}
					this._Agent.Entity = value;
					if ((value != null))
					{
						value.Rentals.Add(this);
						this._AgentID = value.AgentID;
					}
					else
					{
						this._AgentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Agent");
				}
			}
		}
		
		[Association(Name="Client_Rental", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Rentals.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Rentals.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[Association(Name="House_Rental", Storage="_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public House House
		{
			get
			{
				return this._House.Entity;
			}
			set
			{
				House previousValue = this._House.Entity;
				if (((previousValue != value) 
							|| (this._House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._House.Entity = null;
						previousValue.Rentals.Remove(this);
					}
					this._House.Entity = value;
					if ((value != null))
					{
						value.Rentals.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(int);
					}
					this.SendPropertyChanged("House");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.View_VaccantHouse")]
	public partial class View_VaccantHouse
	{
		
		private string _HouseNo;
		
		private string _Address;
		
		private string _AreaName;
		
		private string _Description;
		
		private string _Facitlities;
		
		private string _CategoryName;
		
		public View_VaccantHouse()
		{
		}
		
		[Column(Storage="_HouseNo", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string HouseNo
		{
			get
			{
				return this._HouseNo;
			}
			set
			{
				if ((this._HouseNo != value))
				{
					this._HouseNo = value;
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[Column(Storage="_AreaName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this._AreaName = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_Facitlities", DbType="VarChar(100)")]
		public string Facitlities
		{
			get
			{
				return this._Facitlities;
			}
			set
			{
				if ((this._Facitlities != value))
				{
					this._Facitlities = value;
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Receipts")]
	public partial class Receipt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceiptID;
		
		private int _ClientID;
		
		private System.DateTime _ReceivedDate;
		
		private decimal _Amount;
		
		private int _MonthID;
		
		private int _HouseID;
		
		private EntityRef<Client> _Client;
		
		private EntityRef<House> _House;
		
		private EntityRef<Month> _Month;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiptIDChanging(int value);
    partial void OnReceiptIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnReceivedDateChanging(System.DateTime value);
    partial void OnReceivedDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnMonthIDChanging(int value);
    partial void OnMonthIDChanged();
    partial void OnHouseIDChanging(int value);
    partial void OnHouseIDChanged();
    #endregion
		
		public Receipt()
		{
			this._Client = default(EntityRef<Client>);
			this._House = default(EntityRef<House>);
			this._Month = default(EntityRef<Month>);
			OnCreated();
		}
		
		[Column(Storage="_ReceiptID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceiptID
		{
			get
			{
				return this._ReceiptID;
			}
			set
			{
				if ((this._ReceiptID != value))
				{
					this.OnReceiptIDChanging(value);
					this.SendPropertyChanging();
					this._ReceiptID = value;
					this.SendPropertyChanged("ReceiptID");
					this.OnReceiptIDChanged();
				}
			}
		}
		
		[Column(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._Client.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="SmallMoney NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_MonthID", DbType="Int NOT NULL")]
		public int MonthID
		{
			get
			{
				return this._MonthID;
			}
			set
			{
				if ((this._MonthID != value))
				{
					if (this._Month.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMonthIDChanging(value);
					this.SendPropertyChanging();
					this._MonthID = value;
					this.SendPropertyChanged("MonthID");
					this.OnMonthIDChanged();
				}
			}
		}
		
		[Column(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					if (this._House.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHouseIDChanging(value);
					this.SendPropertyChanging();
					this._HouseID = value;
					this.SendPropertyChanged("HouseID");
					this.OnHouseIDChanged();
				}
			}
		}
		
		[Association(Name="Client_Receipt", Storage="_Client", ThisKey="ClientID", OtherKey="ClientID", IsForeignKey=true)]
		public Client Client
		{
			get
			{
				return this._Client.Entity;
			}
			set
			{
				Client previousValue = this._Client.Entity;
				if (((previousValue != value) 
							|| (this._Client.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Client.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Client.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._ClientID = value.ClientID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("Client");
				}
			}
		}
		
		[Association(Name="House_Receipt", Storage="_House", ThisKey="HouseID", OtherKey="HouseID", IsForeignKey=true)]
		public House House
		{
			get
			{
				return this._House.Entity;
			}
			set
			{
				House previousValue = this._House.Entity;
				if (((previousValue != value) 
							|| (this._House.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._House.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._House.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._HouseID = value.HouseID;
					}
					else
					{
						this._HouseID = default(int);
					}
					this.SendPropertyChanged("House");
				}
			}
		}
		
		[Association(Name="Month_Receipt", Storage="_Month", ThisKey="MonthID", OtherKey="MonthID", IsForeignKey=true)]
		public Month Month
		{
			get
			{
				return this._Month.Entity;
			}
			set
			{
				Month previousValue = this._Month.Entity;
				if (((previousValue != value) 
							|| (this._Month.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Month.Entity = null;
						previousValue.Receipts.Remove(this);
					}
					this._Month.Entity = value;
					if ((value != null))
					{
						value.Receipts.Add(this);
						this._MonthID = value.MonthID;
					}
					else
					{
						this._MonthID = default(int);
					}
					this.SendPropertyChanged("Month");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Months")]
	public partial class Month : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MonthID;
		
		private string _MonthName;
		
		private EntitySet<Receipt> _Receipts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMonthIDChanging(int value);
    partial void OnMonthIDChanged();
    partial void OnMonthNameChanging(string value);
    partial void OnMonthNameChanged();
    #endregion
		
		public Month()
		{
			this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
			OnCreated();
		}
		
		[Column(Storage="_MonthID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MonthID
		{
			get
			{
				return this._MonthID;
			}
			set
			{
				if ((this._MonthID != value))
				{
					this.OnMonthIDChanging(value);
					this.SendPropertyChanging();
					this._MonthID = value;
					this.SendPropertyChanged("MonthID");
					this.OnMonthIDChanged();
				}
			}
		}
		
		[Column(Storage="_MonthName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string MonthName
		{
			get
			{
				return this._MonthName;
			}
			set
			{
				if ((this._MonthName != value))
				{
					this.OnMonthNameChanging(value);
					this.SendPropertyChanging();
					this._MonthName = value;
					this.SendPropertyChanged("MonthName");
					this.OnMonthNameChanged();
				}
			}
		}
		
		[Association(Name="Month_Receipt", Storage="_Receipts", ThisKey="MonthID", OtherKey="MonthID")]
		public EntitySet<Receipt> Receipts
		{
			get
			{
				return this._Receipts;
			}
			set
			{
				this._Receipts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Month = this;
		}
		
		private void detach_Receipts(Receipt entity)
		{
			this.SendPropertyChanging();
			entity.Month = null;
		}
	}
	
	public partial class VaccantListResult
	{
		
		private int _HouseID;
		
		private string _HouseNo;
		
		private string _Address;
		
		private string _AreaName;
		
		private string _Description;
		
		private string _Facitlities;
		
		private string _CategoryName;
		
		private System.Nullable<decimal> _Rent;
		
		public VaccantListResult()
		{
		}
		
		[Column(Storage="_HouseID", DbType="Int NOT NULL")]
		public int HouseID
		{
			get
			{
				return this._HouseID;
			}
			set
			{
				if ((this._HouseID != value))
				{
					this._HouseID = value;
				}
			}
		}
		
		[Column(Storage="_HouseNo", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string HouseNo
		{
			get
			{
				return this._HouseNo;
			}
			set
			{
				if ((this._HouseNo != value))
				{
					this._HouseNo = value;
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[Column(Storage="_AreaName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AreaName
		{
			get
			{
				return this._AreaName;
			}
			set
			{
				if ((this._AreaName != value))
				{
					this._AreaName = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_Facitlities", DbType="VarChar(100)")]
		public string Facitlities
		{
			get
			{
				return this._Facitlities;
			}
			set
			{
				if ((this._Facitlities != value))
				{
					this._Facitlities = value;
				}
			}
		}
		
		[Column(Storage="_CategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this._CategoryName = value;
				}
			}
		}
		
		[Column(Storage="_Rent", DbType="SmallMoney")]
		public System.Nullable<decimal> Rent
		{
			get
			{
				return this._Rent;
			}
			set
			{
				if ((this._Rent != value))
				{
					this._Rent = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
